#!/usr/bin/env ruby

require 'dotenv'
require 'octokit'
require 'thor'
require 'yaml'

Dotenv.load

Octokit.auto_paginate = true

class RepoSetup < Thor
  desc 'add REPO', "Adds labels from labels.yml. If a label already exists, the color will be updated."
  def add(repo)
    return add_all(repo) unless repo.include?('/')

    added_count = 0

    labels.each do |label|
      begin
        client.add_label repo, label['name'], label['color']
        added_count += 1
      rescue Octokit::UnprocessableEntity
        client.update_label repo, label['name'], color: label['color']
      end
    end

    puts "Added #{added_count} label(s) to repo: #{repo_labels_url(repo)}"
  end

  desc 'remove REPO', "Removes existing labels that aren't present in labels.yml"
  def remove(repo)
    existing_labels = client.labels(repo).map { |l| l['name'] }
    our_label_names = labels.map { |l| l['name'] }
    removed_count = 0

    existing_labels.each do |existing|
      unless our_label_names.map(&:downcase).include?(existing.downcase)
        client.delete_label!(repo, existing)
        puts "Removed label \"#{existing}\""
        removed_count += 1
      end
    end

    puts "Removed #{removed_count} label(s) from repo: #{repo_labels_url(repo)}"
  end

  desc 'setup REPO', "runs both add and remove"
  def setup(repo)
    add(repo)
    remove(repo)
  end

  desc 'remove_specified REPO foo,bar',
       'removes the list of labels'
  def remove_specified(repo, label_names)
    return remove_specified_labels_all(repo, label_names) unless repo.include?('/')

    labels_to_remove = label_names.split(',').map(&:downcase)
    existing_labels = client.labels(repo).map { |l| l['name'] }
    removed_count = 0

    existing_labels.each do |existing|
      if labels_to_remove.include?(existing.downcase)
        client.delete_label!(repo, existing)
        puts "Removed label \"#{existing}\""
        removed_count += 1
      end
    end

    puts "Removed #{removed_count} label(s) from repo: #{repo_labels_url(repo)}"
  end

  private

  def add_all(org)
    all_repos(org).each do |repo_name|
      add(repo_name)
    end
  end

  def remove_specified_labels_all(org, label_names)
    all_repos(org).each do |repo_name|
      remove_specified(repo_name, label_names)
    end
  end

  def all_repos(org)
    client.organization_repositories(org).map(&:full_name)
  end

  def client
    @client ||= begin
      if (token = ENV['GITHUB_TOKEN'])
        client = Octokit::Client.new(access_token: token)
      else
        raise 'No access token found. Are you running the script with foreman?'
      end
    end
  end

  def labels
    @labels ||= YAML::load(File.read('labels.yml'))['labels']
  end

  def repo_labels_url(repo)
    "https://github.com/#{repo}/labels"
  end
end

RepoSetup.start(ARGV)
